#include <stdio.h>
#include <stdlib.h>

// Structure for AVL tree node
struct Node {
    int data;
    struct Node *left;
    struct Node *right;
    int height;
    int balance; // Balance factor
};

// Function to get the height of a node
int height(struct Node *node) {
    if (node == NULL)
        return 0;
    return node->height;
}

// Function to get the maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Function to calculate balance factor
int getBalance(struct Node *node) {
    if (node == NULL)
        return 0;
    return height(node->left) - height(node->right);
}

// Function to create a new node
struct Node* newNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->left = NULL;
    node->right = NULL;
    node->height = 1; // New node is initially at height 1
    node->balance = 0;
    return node;
}

// Function to right rotate subtree rooted with y
struct Node* rightRotate(struct Node *y) {
    struct Node *x = y->left;
    struct Node *T2 = x->right;

    // Perform rotation
    x->right = y;
    y->left = T2;

    // Update heights
    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;

    // Update balance factors
    y->balance = getBalance(y);
    x->balance = getBalance(x);

    // Return new root
    return x;
}

// Function to left rotate subtree rooted with x
struct Node* leftRotate(struct Node *x) {
    struct Node *y = x->right;
    struct Node *T2 = y->left;

    // Perform rotation
    y->left = x;
    x->right = T2;

    // Update heights
    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;

    // Update balance factors
    x->balance = getBalance(x);
    y->balance = getBalance(y);

    // Return new root
    return y;
}

// Insert a node into the AVL tree
struct Node* insert(struct Node* node, int data) {
    // 1. Perform standard BST insertion
    if (node == NULL)
        return newNode(data);

    if (data < node->data)
        node->left = insert(node->left, data);
    else if (data > node->data)
        node->right = insert(node->right, data);
    else // Equal keys are not allowed in BST
        return node;

    // 2. Update height of this ancestor node
    node->height = 1 + max(height(node->left), height(node->right));
    
    // 3. Get the balance factor and update node's balance
    node->balance = getBalance(node);
    
    // 4. If node becomes unbalanced, there are 4 cases

    // Left Left Case
    if (node->balance > 1 && data < node->left->data)
        return rightRotate(node);

    // Right Right Case
    if (node->balance < -1 && data > node->right->data)
        return leftRotate(node);

    // Left Right Case
    if (node->balance > 1 && data > node->left->data) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }

    // Right Left Case
    if (node->balance < -1 && data < node->right->data) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }

    // Return the unchanged node pointer
    return node;
}

// Function to find node with minimum value
struct Node* minValueNode(struct Node* node) {
    struct Node* current = node;
    
    // Find the leftmost leaf
    while (current->left != NULL)
        current = current->left;
    
    return current;
}

// Delete a node from the AVL tree
struct Node* deleteNode(struct Node* root, int data) {
    // Standard BST delete
    if (root == NULL)
        return root;
        
    // If the key to be deleted is smaller than the root's key,
    // then it lies in left subtree
    if (data < root->data)
        root->left = deleteNode(root->left, data);
        
    // If the key to be deleted is greater than the root's key,
    // then it lies in right subtree
    else if (data > root->data)
        root->right = deleteNode(root->right, data);
        
    // If key is same as root's key, then this is the node to be deleted
    else {
        // Node with only one child or no child
        if ((root->left == NULL) || (root->right == NULL)) {
            struct Node *temp = root->left ? root->left : root->right;
            
            // No child case
            if (temp == NULL) {
                temp = root;
                root = NULL;
            } else // One child case
                *root = *temp; // Copy the contents of the non-empty child
                
            free(temp);
        } else {
            // Node with two children: Get the inorder successor (smallest
            // in the right subtree)
            struct Node* temp = minValueNode(root->right);
            
            // Copy the inorder successor's data to this node
            root->data = temp->data;
            
            // Delete the inorder successor
            root->right = deleteNode(root->right, temp->data);
        }
    }
    
    // If the tree had only one node then return
    if (root == NULL)
        return root;
        
    // STEP 2: UPDATE HEIGHT OF THE CURRENT NODE
    root->height = 1 + max(height(root->left), height(root->right));
    
    // STEP 3: GET THE BALANCE FACTOR OF THIS NODE (to check unbalanced)
    root->balance = getBalance(root);
    
    // STEP 4: IF THE NODE IS UNBALANCED, HANDLE THE 4 CASES
    
    // Left Left Case
    if (root->balance > 1 && getBalance(root->left) >= 0)
        return rightRotate(root);
        
    // Left Right Case
    if (root->balance > 1 && getBalance(root->left) < 0) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
    
    // Right Right Case
    if (root->balance < -1 && getBalance(root->right) <= 0)
        return leftRotate(root);
        
    // Right Left Case
    if (root->balance < -1 && getBalance(root->right) > 0) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }
    
    return root;
}

// Function to print inorder traversal
void inOrder(struct Node *root) {
    if (root != NULL) {
        inOrder(root->left);
        printf("%d(bf=%d) ", root->data, root->balance);
        inOrder(root->right);
    }
}

// Function to print preorder traversal with balance factors
void preOrder(struct Node *root) {
    if (root != NULL) {
        printf("%d(bf=%d) ", root->data, root->balance);
        preOrder(root->left);
        preOrder(root->right);
    }
}

// Function to create the given AVL tree
struct Node* createGivenAVL() {
    struct Node *root = NULL;
    
    // Insert nodes to replicate the given tree structure
    root = insert(root, 45);
    root = insert(root, 36);
    root = insert(root, 63);
    root = insert(root, 27);
    root = insert(root, 39);
    root = insert(root, 54);
    root = insert(root, 72);
    root = insert(root, 70);
    
    // Set balance factors according to the given tree
    // (In a proper implementation, balance factors would be calculated automatically)
    
    return root;
}

// Function to perform all required operations
void performOperations() {
    // Create the initial AVL tree
    struct Node *root = createGivenAVL();
    
    printf("Initial AVL Tree (Inorder): ");
    inOrder(root);
    printf("\n");
    
    printf("Initial AVL Tree (Preorder): ");
    preOrder(root);
    printf("\n\n");
    
    // Insert nodes 18, 81, 29, 15, 19, 25, 26, and 1
    printf("Inserting nodes: 18, 81, 29, 15, 19, 25, 26, and 1\n");
    root = insert(root, 18);
    root = insert(root, 81);
    root = insert(root, 29);
    root = insert(root, 15);
    root = insert(root, 19);
    root = insert(root, 25);
    root = insert(root, 26);
    root = insert(root, 1);
    
    printf("AVL Tree after insertions (Inorder): ");
    inOrder(root);
    printf("\n");
    
    printf("AVL Tree after insertions (Preorder): ");
    preOrder(root);
    printf("\n\n");
    
    // Delete nodes 39, 63, 15, and 1
    printf("Deleting nodes: 39, 63, 15, and 1\n");
    root = deleteNode(root, 39);
    root = deleteNode(root, 63);
    root = deleteNode(root, 15);
    root = deleteNode(root, 1);
    
    printf("Final AVL Tree after deletions (Inorder): ");
    inOrder(root);
    printf("\n");
    
    printf("Final AVL Tree after deletions (Preorder): ");
    preOrder(root);
    printf("\n");
}

int main() {
    performOperations();
    return 0;
}
